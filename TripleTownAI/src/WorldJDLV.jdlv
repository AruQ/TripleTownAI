public class WorldJDLV
{
	public WorldJDLV()
	{
	}
	
	public static java.util.List<Cell> update(Matrix matrix, Cell lastAdded)
	{
		
		java.util.List<Cell> cells = matrix.toCells ();
		java.util.List<Cell> neighbours = new java.util.ArrayList();
		<# (findNeighbour)
		IN = cells::matrix;
		IN = lastAdded::lastAdded;
		OUT = neighbours :: neighbour;
		adjacent (X,Y,X,Y1):- matrix (X,Y,_),matrix (X,Y1,_), Y=Y1+1.
		adjacent (X,Y,X1,Y):- matrix (X,Y,_),matrix (X1,Y,_), X=X1+1.
		adjacent (X,Y,X1,Y1) :- adjacent (X1,Y1,X,Y).
		neighbour (X,Y,T) :- lastAdded (X,Y,T).
		neighbour (X,Y,T) :- matrix (X,Y,T), neighbour (X1,Y1,T), adjacent (X,Y,X1,Y1).
		#>
	  	return neighbours;
	}
	
	public static java.util.List<Cell> bearAvaibleMovements(Matrix matrix, Cell bear)
	{
		java.util.List<Cell> cells = matrix.toCells ();
		java.util.List<Cell> avaibleMovements = new java.util.ArrayList();
		<# (findBearMovements)
		IN = cells::matrix;
		IN = bear::bear;
		OUT = avaibleMovements :: avaibleMovement;
		adjacent (X,Y,X,Y1):- matrix (X,Y,_),matrix (X,Y1,_), Y=Y1+1.
		adjacent (X,Y,X1,Y):- matrix (X,Y,_),matrix (X1,Y,_), X=X1+1.
		adjacent (X,Y,X1,Y1) :- adjacent (X1,Y1,X,Y).
		avaibleMovement (X,Y,"Empty") :- bear (X1,Y1,_), adjacent(X,Y,X1,Y1), matrix (X,Y,"Empty").
		#>
	  	return avaibleMovements;
	}
	
	
	

}
