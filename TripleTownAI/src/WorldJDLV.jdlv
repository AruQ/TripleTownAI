public class WorldJDLV
{
	public WorldJDLV()
	{
	}
	
	public static java.util.List<Cell> update(Matrix matrix, Cell lastAdded)
	{
		
		java.util.List<Cell> cells = matrix.toCells ();
		java.util.List<Cell> neighbours = new java.util.ArrayList();
		<# (findNeighbour)
		IN = cells::matrix;
		IN = lastAdded::lastAdded;
		OUT = neighbours :: neighbour;
		adjacent (X,Y,X,Y1):- matrix (X,Y,_),matrix (X,Y1,_), Y=Y1+1.
		adjacent (X,Y,X1,Y):- matrix (X,Y,_),matrix (X1,Y,_), X=X1+1.
		adjacent (X,Y,X1,Y1) :- adjacent (X1,Y1,X,Y).
		neighbour (X,Y,T) :- lastAdded (X,Y,T).
		neighbour (X,Y,T) :- matrix (X,Y,T), neighbour (X1,Y1,T), adjacent (X,Y,X1,Y1).
		#>
	  	return neighbours;
	}
	
	public static java.util.List<Cell> bearAvaibleMovements(Matrix matrix, Cell bear)
	{
		java.util.List<Cell> cells = matrix.toCells ();
		java.util.List<Cell> avaibleMovements = new java.util.ArrayList();
		<# (findBearMovements)
		IN = cells::matrix;
		IN = bear::bear;
		OUT = avaibleMovements :: avaibleMovement;
		adjacent (X,Y,X,Y1):- matrix (X,Y,_),matrix (X,Y1,_), Y=Y1+1.
		adjacent (X,Y,X1,Y):- matrix (X,Y,_),matrix (X1,Y,_), X=X1+1.
		adjacent (X,Y,X1,Y1) :- adjacent (X1,Y1,X,Y).
		avaibleMovement (X,Y,"Empty") :- bear (X1,Y1,_), adjacent(X,Y,X1,Y1), matrix (X,Y,"Empty").
		#>
	  	return avaibleMovements;
	}
	
	public static java.util.List<BearMovement> calculateNewPositionBears(Matrix matrix,java.util.List<Cell> tombstones)
	{
		java.util.List<Cell> cells = matrix.toCells ();
		java.util.List<BearMovement> avaibleMovements = new java.util.ArrayList();
		<# (findBearMovements)
		IN = cells::matrix;
		OUT = avaibleMovements :: move;
		OUT = tombstones::tombstone;
		move(X,Y,X1,Y1)| notMove(X,Y,X1,Y1):-matrix(X,Y,"Bear"),adjacent(X,Y,X1,Y1).
		:-move(X1,Y1,X2,Y2),move(X2,Y2,X1,Y1).
		:-move(X1,Y1,X2,Y2),from(X3,Y3,X2,Y2),X3!=X1.
		:-move(X1,Y1,X2,Y2),from(X3,Y3,X2,Y2),Y3!=Y1.
		:-#count{X2,Y2:move(X1,Y1,X2,Y2)}>1,matrix(X1,Y1,"Bear").
		freeCell(X,Y):-move(X,Y,_,_).
		freeCell(X,Y):-matrix(X,Y,"Empty").
		:-move(X,Y,X1,Y1),not freeCell(X1,Y1).
		adjacent (X,Y,X,Y1):- matrix (X,Y,_),matrix (X,Y1,_), Y=Y1+1.
		adjacent (X,Y,X1,Y):- matrix (X,Y,_),matrix (X1,Y,_), X=X1+1.
		adjacent (X,Y,X1,Y1) :- adjacent (X1,Y1,X,Y).
		movedBear(X,Y):-move(X,Y,X2,Y2).
		tombstone(X,Y,"Tombstone"):-matrix(X,Y,"Bear"),not movedBear(X,Y).
		#>
	  	return avaibleMovements;
	}
	
	public static java.util.List<Cell> aiPlayer(Matrix matrix, java.util.List<Cell> maxElems,Item nextItem)
	{
		java.util.List<Item> items=ItemManager.getInstance().getItems();
		java.util.List<Cell> cells = matrix.toCells();
		String nextItemName=nextItem.getName();
		java.util.List<Cell> places= new java.util.ArrayList();
		<# (aiPlayer)
		IN = cells::matrix;
		IN = items::item;
		IN = nextItemName::nextItem;
		IN = maxElems::maxElement;
		OUT = places :: place;
		FILE="C:/Users/Alessandro/Unical/Artificial Intelligence/Workspace/TripleTown/tripleTownAI.dl";//append DLV code content in the selected
		#>
		return places;
	}
	
}